# File da compilare
MAIN	= find_substr
MODULES	= mystring modulo

################################################################
## Colordefinition
################################################################
#NO_COLOR    = \x1b[0m
#OK_COLOR    = \x1b[32;01m
#WARN_COLOR  = \x1b[33;01m
#ERROR_COLOR = \x1b[31;01m

# Percorso di moduli e header (si suppone che i nomi degli header 
# siano gli stessi di quelli dei moduli)
MDIR	= ../moduli
IDIR	= ../include

# Directory di tutti i moduli ($(VPATH) è una variabile speciale?)
VPATH	= $(MDIR)

# Librerie da includere
LBS		= m # librerie matematiche
LBSPATH	= 

# Creo l'opzione da passare al compilatore per le librerie: aggiungo
# il prefisso '-l' a tutte le librerie specificate in $(LBS) e il pre-
# fisso '-L' alle directory dove si trovano le librerie
LDFLAGS	= $(addprefix -l,$(LBS))
ifneq ($(LDFLAGS),)
	LDFLAGS += $(addprefix -L,$(LBSPATH))
endif


# Creo l'opzione da passare al compilatore per le directory dei file 
# .h "custom". L'opzione '-I-' indica che nelle directory specificate
# in precedenza bisogna cercare soltanto i file locali (cioè non in-
# clusi con '#include < ... >')
INCPATH	= $(addprefix -I,$(IDIR))
# FIXME Messaggio di errore dice che è obsoleto
# INCPATH += -I-

# Creo i file oggetto dei moduli
OBJS	= $(addsuffix .o,$(MODULES))

# Compilatore C/C++
CC	= gcc
CXX = g++

# some cpu-dependent options
MARCH	= core2
MASM	= intel

# standard language
STD		= gnu++11
# Opzioni di compilazione
CXXFLAGS = -W -Wall -Wextra -Wunreachable-code -Wunused \
		   -Wformat-security -Wmissing-noreturn \
		   -O3 -pedantic -std=$(STD) -masm=$(MASM) \
		   -march=$(MARCH) -mtune=$(MARCH) -fopenmp # -time

# Regola per compilare il file $(MAIN)
# XXX La metto come prima funzione così è quella predefinita
$(MAIN): %: %.o %.d $(OBJS) Makefile
	@ echo
	@ echo "`tput bold``tput setaf 1`[INFO]`tput sgr0`"
	@ echo 'Architettura rilevata:\t\t' `tput setaf 2`` gcc -march=native -Q \
		--help=target | grep --text march | cut -f3 ``tput sgr0`
	@ echo 'Architettura selezionata:\t' `tput setaf 2`$(MARCH)`tput sgr0`
	@ echo
	$(CXX) $< $(OBJS) $(CXXFLAGS) -o $@ $(INCPATH) $(LDFLAGS)
	@ echo

# Includo i file contenenti le dipendenze di ogni sorgente
-include $(addsuffix .d,$(MODULES))
-include $(addsuffix .d,$(MAIN))

# Regole per creare i file '.d' delle dipendenze
$(addsuffix .d,$(MODULES)): %.d: %.cc Makefile
	$(CXX) -MM -ansi $(INCPATH) $< -o $@

$(addsuffix .d,$(MAIN)): %.d: %.cpp Makefile
	$(CXX) -MM -ansi $(INCPATH) $< -o $@

# Regole per creare i file oggetto moduli e main
$(addsuffix .o,$(MAIN)): %.o: %.cpp %.d Makefile
	$(CXX) -c $< $(CXXFLAGS) $(INCPATH) -o $@

$(OBJS): %.o: %.cc %.d Makefile
	$(CXX) -c $< $(CXXFLAGS) $(INCPATH) -o $@

mkdep: $(addsuffix .d,$(MODULES)) $(addsuffix .d,$(MAIN))
	@echo "Genero le tavole delle dipendenze"

mkxeq: $(MAIN)

# pulisce la directory
clean:
	@rm --recursive --force --verbose *.d *.o .tmp $(MAIN)
.PHONY: clean

all: clean mkdep mkxeq
.PHONY: all
